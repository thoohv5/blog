// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/common/v1/user/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReq) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Param.(type) {

	case *LoginReq_UserLoginParam_:

		if v, ok := interface{}(m.GetUserLoginParam()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginReqValidationError{
					field:  "UserLoginParam",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LoginReq_ThirdLoginParam_:

		if v, ok := interface{}(m.GetThirdLoginParam()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginReqValidationError{
					field:  "ThirdLoginParam",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ThirdPartType

	// no validation rules for ThirdPartCode

	// no validation rules for Password

	return nil
}

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserCode

	return nil
}

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on InfoReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *InfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserCode

	return nil
}

// InfoReqValidationError is the validation error returned by InfoReq.Validate
// if the designated constraints aren't met.
type InfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoReqValidationError) ErrorName() string { return "InfoReqValidationError" }

// Error satisfies the builtin error interface
func (e InfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoReqValidationError{}

// Validate checks the field values on InfoResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *InfoResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserCode

	// no validation rules for Password

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for WechatOpenid

	// no validation rules for Portrait

	// no validation rules for NickName

	// no validation rules for Sex

	return nil
}

// InfoRespValidationError is the validation error returned by
// InfoResp.Validate if the designated constraints aren't met.
type InfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoRespValidationError) ErrorName() string { return "InfoRespValidationError" }

// Error satisfies the builtin error interface
func (e InfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoRespValidationError{}

// Validate checks the field values on LoginReq_UserLoginParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginReq_UserLoginParam) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserCode

	return nil
}

// LoginReq_UserLoginParamValidationError is the validation error returned by
// LoginReq_UserLoginParam.Validate if the designated constraints aren't met.
type LoginReq_UserLoginParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReq_UserLoginParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReq_UserLoginParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReq_UserLoginParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReq_UserLoginParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReq_UserLoginParamValidationError) ErrorName() string {
	return "LoginReq_UserLoginParamValidationError"
}

// Error satisfies the builtin error interface
func (e LoginReq_UserLoginParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq_UserLoginParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReq_UserLoginParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReq_UserLoginParamValidationError{}

// Validate checks the field values on LoginReq_ThirdLoginParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginReq_ThirdLoginParam) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ThirdPartType

	// no validation rules for ThirdPartCode

	return nil
}

// LoginReq_ThirdLoginParamValidationError is the validation error returned by
// LoginReq_ThirdLoginParam.Validate if the designated constraints aren't met.
type LoginReq_ThirdLoginParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReq_ThirdLoginParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReq_ThirdLoginParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReq_ThirdLoginParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReq_ThirdLoginParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReq_ThirdLoginParamValidationError) ErrorName() string {
	return "LoginReq_ThirdLoginParamValidationError"
}

// Error satisfies the builtin error interface
func (e LoginReq_ThirdLoginParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq_ThirdLoginParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReq_ThirdLoginParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReq_ThirdLoginParamValidationError{}
