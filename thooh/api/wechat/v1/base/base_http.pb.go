// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package base

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WeChatHTTPServer interface {
	CheckQRCode(context.Context, *CheckQRCodeReq) (*CheckQRCodeResp, error)
	QRCode(context.Context, *QRCodeReq) (*QRCodeResp, error)
}

func RegisterWeChatHTTPServer(s *http.Server, srv WeChatHTTPServer) {
	r := s.Route("/")
	r.GET("/wechat/v1/base/qr-code", _WeChat_QRCode0_HTTP_Handler(srv))
	r.GET("/wechat/v1/base/check-qr-code", _WeChat_CheckQRCode0_HTTP_Handler(srv))
}

func _WeChat_QRCode0_HTTP_Handler(srv WeChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QRCodeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wechat.v1.base.WeChat/QRCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QRCode(ctx, req.(*QRCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QRCodeResp)
		return ctx.Result(200, reply)
	}
}

func _WeChat_CheckQRCode0_HTTP_Handler(srv WeChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckQRCodeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wechat.v1.base.WeChat/CheckQRCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckQRCode(ctx, req.(*CheckQRCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckQRCodeResp)
		return ctx.Result(200, reply)
	}
}

type WeChatHTTPClient interface {
	CheckQRCode(ctx context.Context, req *CheckQRCodeReq, opts ...http.CallOption) (rsp *CheckQRCodeResp, err error)
	QRCode(ctx context.Context, req *QRCodeReq, opts ...http.CallOption) (rsp *QRCodeResp, err error)
}

type WeChatHTTPClientImpl struct {
	cc *http.Client
}

func NewWeChatHTTPClient(client *http.Client) WeChatHTTPClient {
	return &WeChatHTTPClientImpl{client}
}

func (c *WeChatHTTPClientImpl) CheckQRCode(ctx context.Context, in *CheckQRCodeReq, opts ...http.CallOption) (*CheckQRCodeResp, error) {
	var out CheckQRCodeResp
	pattern := "/wechat/v1/base/check-qr-code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wechat.v1.base.WeChat/CheckQRCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WeChatHTTPClientImpl) QRCode(ctx context.Context, in *QRCodeReq, opts ...http.CallOption) (*QRCodeResp, error) {
	var out QRCodeResp
	pattern := "/wechat/v1/base/qr-code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wechat.v1.base.WeChat/QRCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
