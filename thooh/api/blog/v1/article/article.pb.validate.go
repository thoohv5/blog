// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/blog/v1/article/article.proto

package article

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Label

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for Md

	// no validation rules for Read

	// no validation rules for Like

	return nil
}

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on CreateResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateRespValidationError is the validation error returned by
// CreateResp.Validate if the designated constraints aren't met.
type CreateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRespValidationError) ErrorName() string { return "CreateRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRespValidationError{}

// Validate checks the field values on ListReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetStart() < 0 {
		return ListReqValidationError{
			field:  "Start",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() <= 0 {
		return ListReqValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Keyword

	return nil
}

// ListReqValidationError is the validation error returned by ListReq.Validate
// if the designated constraints aren't met.
type ListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReqValidationError) ErrorName() string { return "ListReqValidationError" }

// Error satisfies the builtin error interface
func (e ListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReqValidationError{}

// Validate checks the field values on ListResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HasMore

	// no validation rules for Start

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRespValidationError is the validation error returned by
// ListResp.Validate if the designated constraints aren't met.
type ListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRespValidationError) ErrorName() string { return "ListRespValidationError" }

// Error satisfies the builtin error interface
func (e ListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRespValidationError{}

// Validate checks the field values on DetailReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DetailReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// DetailReqValidationError is the validation error returned by
// DetailReq.Validate if the designated constraints aren't met.
type DetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailReqValidationError) ErrorName() string { return "DetailReqValidationError" }

// Error satisfies the builtin error interface
func (e DetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailReqValidationError{}

// Validate checks the field values on DetailResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DetailResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailRespValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DetailRespValidationError is the validation error returned by
// DetailResp.Validate if the designated constraints aren't met.
type DetailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailRespValidationError) ErrorName() string { return "DetailRespValidationError" }

// Error satisfies the builtin error interface
func (e DetailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailRespValidationError{}

// Validate checks the field values on ArticleEntity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ArticleEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Label

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for Md

	// no validation rules for Read

	// no validation rules for Like

	return nil
}

// ArticleEntityValidationError is the validation error returned by
// ArticleEntity.Validate if the designated constraints aren't met.
type ArticleEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleEntityValidationError) ErrorName() string { return "ArticleEntityValidationError" }

// Error satisfies the builtin error interface
func (e ArticleEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleEntityValidationError{}
